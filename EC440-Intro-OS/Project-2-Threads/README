THREADS.C

THIS PROGRAM IMPLEMENTS A PARTIAL THREAD LIBRARY TO CREATE THREADS. THIS THREAD LIMITS THREAD CREATION TO 128 THREADS TOTAL 
(PLUS A THREAD 0 FOR THE MAIN FUNCTION) THE PROGRAM CONSISTS OF THE FOLLOWING FUNCTIONS:

SCHEDULE -
  THIS FUNCTION IS TRIGGERED ON A SIGALRM EVERY 50MS USING A SIGACTION HANDLER AND STRUCT AND UALARM INTIALIZED WHEN CREATING 
  THE MAIN THREAD IN PTHREAD_CREATE. THIS FUNCTION CALLS SETJMP ON THE CURRENTLY RUNNING THREAD TO SAVE THE CONTEXT, 
  LOOPS THROUGH THE THREADS AND FINDS THE NEXT THREAD IN A READY STATE, THEN EXECUTES THE THREAD VIA A LONGJMP CALL.

SCHHANDLER -
  THIS FUNCTION IS A WRAPPER TO TRIGGER A CALL TO SCHEDULE WHEN SIGARLM GOES OFF - THE SIGACTION FOR SIGALRM POINTS 
  TO THIS FUNCTION AS THE HANDLER, WHICH THEN CALLS SCHEDULE AS ITS ONLY COMMAND.

PTHREAD_SELF - 
  THIS FUNCTION RETURNS THE ID OF THE CURRENTLY RUNNING THREAD.

PTHREAD_CREATE -
  THIS FUCNTION TAKES THE FOLLOWING INPUTS:
	*THREAD - POINTER TO THREAD INDEX STRUCTRE IN MAIN
        *ATTR - ALWAYS SET TO NULL
        *START_ROUTINE - THE FUNCTION BEING EXECUTED IN THE THREAD BEING CREATED
        *ARG - THE ARGUMENT BEING PASSED TO START_ROUTINE
  PTHREAD_CREATE CREATES A NEW THREAD CONTROL BLOCK FOR EACH NEW THERAD. THE TCB IS CONTAINED IN THE ARRAY THREADS, WHICH IS
  OF TYPE Thread, EACH ELEMENT CONSISTING OF THE FOLLOWING:
        TID - THE THREAD ID
        TENV - THE SAVED REGISTERS OF THE THERAD
        TSTACK - THE ALLOCATED MEMORY STACK
        STATUS - THE STATUS OF THE THREAD (READY, RUNNING, OR EXIT)

  FOR EACH NEW THREAD, PTHREAD_CREATE SAVES THE THREAD ID (AN INT 1-128 BASED ON THE NUMBER OF THREADS ALREADY CREATED), 
  MALLOCS A BLOCK OF 32K WHICH IS SAVED IN TSTACK, AND SAVES POINTERS TO ARG AND PTHREAD_EXIT ON THE TOP OF THE STACK. 
  SETJMP IS THEN CALLED TO SAVE THE REGISTERS, WHICH IS SUBSEQUENTLY MODIFIED TO POINT TO THE CREATED TSTACK, AND THE 
  SPECIFIED START_ROUTINE. THE STATUS OF THE THREAD IS SET TO READY SO IT CAN BE SCHEDULUED.

  ON STARTUP, THE MAIN FUNCTION IS SAVED IN ELEMENT 0 OF THREADS; IT'S SETJMP BUFFER IS NOT MODIFIED, AND A STACK 
  IS NOT CREATED, AS MAIN ALREADY HAS A STACK AND THE REGISTERS POINT TO MAIN BY DEFAULT SINCE THAT IS WHERE THE 
  THREADS ARE BEING CREATED FROM. THREADS[0] IS THEN SET TO READY. THE SCHEDULUER HANDLER IS INITIALIZED, AND A 
  50MS UALARM CALLED TO TRIGGER THREAD SWITCHING.

PTHREAD_EXIT -
  THIS FUNCTION TAKES THE FOLLOWING INPUT:
	*VALUE_PTR - POINTER FROM THE CALLING FUNCTION.

  THE THREAD FREES THE PREVIOUSLY ALLOCATED MEMORY, AND SETS THE THREAD STATUS TO EXIT. SCHEDULE IS THEN CALLED TO
  RUN THE NEXT READY THREAD. THIS FUNCTION IS CALLED WHEN EACH THREAD RETURNS AS A RESULT OF THE STACK MANIPULATION IN 
  PTHREAD_CREATE - THREAD[0] (THE MAIN FUNCTION) WILL NOT CALL THIS FUNCTION, AND INSTEAD EXIT NORMALLY.
    
